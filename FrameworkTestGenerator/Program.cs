using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime;
using System.Reflection;
using System.Threading.Tasks;

namespace TestGenerator
{
    public class Program
    {
        public static FileController fileController { get; private set; }
        public static TestController testController { get; private set; }
        public static async Task Main(string[] args)
        {
            Console.WriteLine("Insert the project assembly path");
            var input1 =
                //Console.ReadLine();
                @"C:\Users\ejesus\workspace\ssc-servicos-cartao\Api.Cartao\bin\Api.Cartao.dll";

            Console.WriteLine("Insert the directory to write the test classes");
            var input2 =
               //Console.ReadLine();
               @"C:\Users\ejesus\workspace\ssc-servicos-cartao\Api.Cartao.IntegrationTests\ApiTests\AutoGeneratedControllerTests\";

            fileController = new FileController(input1, input2);

            string[] directories = fileController.controllerTestFolderPath.Split(char.Parse("\\"));
            var lenght = directories.Length;
            string testClassNamespace = directories[lenght - 4] + "." + directories[lenght - 3] + "." + directories[lenght - 2];
            string setupNamespace = directories[lenght - 4] + "." + directories[lenght - 3] + "." + "Setup";
            testController = new TestController(testClassNamespace, setupNamespace);

            var fileInfo = fileController.LoadProjectAssemblyFileInfo();

            var types = testController.LoadTypes(fileInfo);

            var testClasses = testController.CreateTests(types);

            await fileController.WriteTests(testClasses);
        }

        static IEnumerable<Assembly> GetAssemblies(string mainPath) => new List<Assembly>();
        static void MM(string[] args)
        {
            var controllersClasses = GetAssemblies(args[0])
                .Select(d => d.GetControllerTypes())
                .Where(d => args[1].Split(',').Contains(d.Name));

            var testes = controllersClasses.Select(d => d.GetTestsFromController());
        }
    }

    public static class AssemblyExtensions
    {
        public static Type GetControllerTypes(this Assembly assembly)
        {
            return null;
        }
    }

    public static class TypeExtensions
    {
        public static IEnumerable<TestMethod2> GetTestsFromController(this Type controllerType)
        {
            var methods = controllerType.GetMethods()
                .Where(d => d.GetCustomAttribute<GetAttribute>() is object);
            foreach (var method in methods)
                yield return new TestMethod2(controllerType, method);
        }
    }

    public class GetAttribute : Attribute { }

    public class TestMethod2
    {
        public Type ControllerType { get; }
        public TestMethod2(Type controller, MethodInfo methodInfo)
        {
            ControllerType = controller;
        }
    }

    public class MinhaTestClass
    {
        public IEnumerable<string> Usings { get; }
        public IEnumerable<TestMethod2> TestMethods { get; }

        public MinhaTestClass(IEnumerable<TestMethod2> testMethods)
        {

        }
    }
}
